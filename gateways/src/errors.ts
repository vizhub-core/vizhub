import { VizId } from '@vizhub/viz-types';
import { CommitId, EntityName } from 'entities';

// A VizHub-specific error code.
export enum VizHubErrorCode {
  // When a resource is not found.
  // e.g. an invalid id was used, or a viz was deleted
  resourceNotFound = 'resourceNotFound',
  invalidCommitOp = 'invalidCommitOp',
  invalidDecrement = 'invalidDecrement',
  missingParameter = 'missingParameter',
  missingAuth = 'missingAuth',
  invariantViolation = 'invariantViolation',
  accessDenied = 'accessDenied',
  tooLarge = 'tooLarge',
  tooLargeForFree = 'tooLargeForFree',
  buildError = 'buildError',
  creditsNeeded = 'creditsNeeded',
  dailyQuotaExceeded = 'dailyQuotaExceeded',
}

export const errorCodeLabels = {
  [VizHubErrorCode.resourceNotFound]: 'Resource not found',
  [VizHubErrorCode.invalidCommitOp]:
    'Invalid commit operation',
  [VizHubErrorCode.invalidDecrement]: 'Invalid decrement',
  [VizHubErrorCode.missingParameter]: 'Missing parameter',
  [VizHubErrorCode.missingAuth]: 'Authentication required',
  [VizHubErrorCode.invariantViolation]:
    'Invariant violation',
  [VizHubErrorCode.accessDenied]: 'Access denied',
  [VizHubErrorCode.tooLarge]: 'Data too large',
  [VizHubErrorCode.tooLargeForFree]: 'Data too large',
};

// Errors generated by gateway methods be of this type.
// This is a plain object rather than extending Error
// because we don't need stack traces, and we DO need
// to serialize these errors to JSON. If we extend Error,
// the `message` property is not serialized to JSON.
export class VizHubError {
  name: string;
  code: VizHubErrorCode;
  message: string;
  constructor(message: string, code: VizHubErrorCode) {
    this.name = 'VizHubError';
    this.code = code;
    this.message = message;
  }
}

export const resourceNotFoundError = (
  id: string,
  entityName: EntityName,
): VizHubError =>
  new VizHubError(
    `Resource (${entityName}) not found with id: ${id}`,
    VizHubErrorCode.resourceNotFound,
  );

export const invalidCommitOp = (
  commitId: CommitId,
  message: string,
): VizHubError =>
  new VizHubError(
    'Invalid op in commit with id: ' +
      commitId +
      '\n' +
      message,
    VizHubErrorCode.invalidCommitOp,
  );

export const invalidDecrementError = (
  id: VizId,
  field: string,
): VizHubError =>
  new VizHubError(
    'Cannot decrement zero-value field `' +
      field +
      '` on viz `' +
      id +
      '`',
    VizHubErrorCode.invalidCommitOp,
  );

export const missingParameterError = (
  parameter: string,
): VizHubError =>
  new VizHubError(
    'Missing parameter: ' + parameter,
    VizHubErrorCode.missingParameter,
  );

export const authenticationRequiredError = (
  message?: string,
): VizHubError =>
  new VizHubError(
    message || 'Authentication required',
    VizHubErrorCode.missingAuth,
  );

export const invariantViolationError = (
  message: string,
): VizHubError =>
  new VizHubError(
    'Invariant violation: ' + message,
    VizHubErrorCode.invariantViolation,
  );

// Access denied
// e.g. user does not have permission to read/write a viz
export const accessDeniedError = (
  message: string,
): VizHubError =>
  new VizHubError(message, VizHubErrorCode.accessDenied);

// Too large for VizHub in general
export const tooLargeError = (
  message: string,
): VizHubError =>
  new VizHubError(message, VizHubErrorCode.tooLarge);

// Too large for the free plan but not for Premium
export const tooLargeForFreeError = (
  message: string,
): VizHubError =>
  new VizHubError(message, VizHubErrorCode.tooLargeForFree);

// Build errors
export const missingIndexJSError = (): VizHubError =>
  new VizHubError(
    'Missing index.js',
    VizHubErrorCode.buildError,
  );

export const invalidPackageJSONError = (
  message: string,
): VizHubError =>
  new VizHubError(
    'Invalid package.json: ' + message,
    VizHubErrorCode.buildError,
  );

export const rollupError = (message: string): VizHubError =>
  new VizHubError(message, VizHubErrorCode.buildError);

export const missingImportError = (
  message: string,
): VizHubError =>
  new VizHubError(
    'Missing import: ' + message,
    VizHubErrorCode.buildError,
  );

export const creditsNeededError = (
  message: string,
): VizHubError =>
  new VizHubError(message, VizHubErrorCode.creditsNeeded);

export const dailyQuotaExceededError = (
  message: string,
): VizHubError =>
  new VizHubError(message, VizHubErrorCode.dailyQuotaExceeded);
